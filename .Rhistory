makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
x<-matrix(1:4,2,2)
x
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix
my_matrix$get()
my_matrix$getInverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
cacheSolve(my_matrix)
my_matrix$getInverse()
makeCacheMatrix <- function(x = matrix()) {
# cached inverse of matrix
inv <- NULL
## getter/setter for matrix
get <- function() x
set <- function(y) {
x <<- y
inv <<- NULL
}
## getter/setter for matrix inverse
getinv <- function() inv
setinv <- function(inverse) inv <<- inverse
## return list of functions for matrix
list(get=get, set=set, getinv=getinv, setinv=setinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# return cached matrix inverse if it's been already computed
if (!is.null(inv)) {
message("inverse is cached")
return(inv)
}
# compute inverse of matrix
m <- x$get()
inv <- solve(m, ...)
# cache inverse
x$setinv(inv)
# return inverse of matrix
return(inv)
}
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
